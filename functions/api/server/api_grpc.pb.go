// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HumanService_Version_FullMethodName = "/main.HumanService/Version"
	HumanService_Humans_FullMethodName  = "/main.HumanService/Humans"
)

// HumanServiceClient is the client API for HumanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HumanServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	Humans(ctx context.Context, in *HumansRequest, opts ...grpc.CallOption) (*HumansResponse, error)
}

type humanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHumanServiceClient(cc grpc.ClientConnInterface) HumanServiceClient {
	return &humanServiceClient{cc}
}

func (c *humanServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, HumanService_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humanServiceClient) Humans(ctx context.Context, in *HumansRequest, opts ...grpc.CallOption) (*HumansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HumansResponse)
	err := c.cc.Invoke(ctx, HumanService_Humans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HumanServiceServer is the server API for HumanService service.
// All implementations must embed UnimplementedHumanServiceServer
// for forward compatibility.
type HumanServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	Humans(context.Context, *HumansRequest) (*HumansResponse, error)
	mustEmbedUnimplementedHumanServiceServer()
}

// UnimplementedHumanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHumanServiceServer struct{}

func (UnimplementedHumanServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedHumanServiceServer) Humans(context.Context, *HumansRequest) (*HumansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Humans not implemented")
}
func (UnimplementedHumanServiceServer) mustEmbedUnimplementedHumanServiceServer() {}
func (UnimplementedHumanServiceServer) testEmbeddedByValue()                      {}

// UnsafeHumanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HumanServiceServer will
// result in compilation errors.
type UnsafeHumanServiceServer interface {
	mustEmbedUnimplementedHumanServiceServer()
}

func RegisterHumanServiceServer(s grpc.ServiceRegistrar, srv HumanServiceServer) {
	// If the following call pancis, it indicates UnimplementedHumanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HumanService_ServiceDesc, srv)
}

func _HumanService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HumanService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumanService_Humans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumanServiceServer).Humans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HumanService_Humans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumanServiceServer).Humans(ctx, req.(*HumansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HumanService_ServiceDesc is the grpc.ServiceDesc for HumanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HumanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.HumanService",
	HandlerType: (*HumanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _HumanService_Version_Handler,
		},
		{
			MethodName: "Humans",
			Handler:    _HumanService_Humans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
